/*! For license information please see main.dbaaeacb01b5b77b0b9a.js.LICENSE.txt */
(()=>{"use strict";var t,e,r,n={5422:(t,e,r)=>{var n=r(4730),o=300,i=document.getElementById("timer"),a=function(){var t=Math.floor(o/60),e=o%60;i.textContent="".concat(t.toString().padStart(2,"0"),":").concat(e.toString().padStart(2,"0")),o<=0&&clearInterval(c),o--},c=setInterval(a,1e3);const s=r.p+"assets/icon-10.png",u=r.p+"assets/icon-40fs.png",l=r.p+"assets/icon-box.png",f=r.p+"assets/icon-dragonfly.png",h=r.p+"assets/icon-fish.png",p=r.p+"assets/icon-J.png",d=r.p+"assets/icon-K.png",g=r.p+"assets/icon-man.png",y=r.p+"assets/icon-Q.png",v=r.p+"assets/icon-rod.png",m=r.p+"assets/icon-scatter.png";function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function w(){w=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var i=e&&e.prototype instanceof v?e:v,a=Object.create(i.prototype),c=new C(n||[]);return o(a,"_invoke",{value:k(t,r,c)}),a}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var h="suspendedStart",p="suspendedYield",d="executing",g="completed",y={};function v(){}function m(){}function x(){}var E={};u(E,a,(function(){return this}));var L=Object.getPrototypeOf,P=L&&L(L(N([])));P&&P!==r&&n.call(P,a)&&(E=P);var S=x.prototype=v.prototype=Object.create(E);function O(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function r(o,i,a,c){var s=f(t[o],t,i);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==b(l)&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return r("throw",t,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,r,n){var o=h;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===g){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var s=_(c,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=d;var u=f(e,r,n);if("normal"===u.type){if(o=n.done?g:p,u.arg===y)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(o=g,n.method="throw",n.arg=u.arg)}}}function _(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=f(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function M(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function N(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}throw new TypeError(b(e)+" is not iterable")}return m.prototype=x,o(S,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:m,configurable:!0}),m.displayName=u(x,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,u(t,s,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},O(j.prototype),u(j.prototype,c,(function(){return this})),e.AsyncIterator=j,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new j(l(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},O(S),u(S,s,"Generator"),u(S,a,(function(){return this})),u(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=N,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(M),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return c.type="throw",c.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),M(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;M(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:N(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function x(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}var E;r.p,(E=w().mark((function t(){var e,r,o,i,c,b,x,E,L,P,S,O,j,k,_,T,M,C,N,A,G;return w().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return M=function(t){return function(e){return--e*e*((t+1)*e+t)+1}},T=function(t,e,r){return t*(1-r)+e*r},_=function(t,e,r,n,o,i,a){var c={object:t,property:e,propertyBeginValue:t[e],target:r,easing:o,time:n,change:i,complete:a,start:Date.now()};return k.push(c),c},j=function(){S=!1},O=function(){if(!S){S=!0;for(var t=0;t<i.length;t++){var e=i[t],r=e.position+10+5*t+8;_(e,"position",r,2500+600*t+4800,M(.5),null,t===i.length-1?j:null)}}},e=new n.lgM,t.next=8,e.init({backgroundAlpha:0,width:880,height:480,text:"center"});case 8:return document.getElementById("app").appendChild(e.canvas),t.next=11,n.sP.load([s,u,l,f,h,p,d,g,y,v,m]);case 11:for(r=160,o=[n.gPd.from(s),n.gPd.from(u),n.gPd.from(l),n.gPd.from(f),n.gPd.from(h),n.gPd.from(p),n.gPd.from(d),n.gPd.from(g),n.gPd.from(y),n.gPd.from(v),n.gPd.from(m)],i=[],c=new n.mcf,b=0;b<5;b++){for((x=new n.mcf).x=180*b,c.addChild(x),(E={container:x,symbols:[],position:0,previousPosition:0,blur:new n.eV2}).blur.blurX=0,E.blur.blurY=0,x.filters=[E.blur],L=0;L<10;L++)(P=new n.kxk(o[Math.floor(Math.random()*o.length)])).y=L*r,P.scale.x=P.scale.y=Math.min(r/P.width,r/P.height),P.x=Math.round((r-P.width)/2),E.symbols.push(P),x.addChild(P);i.push(E)}e.stage.addChild(c),S=!1,e.ticker.add((function(){for(var t=0;t<i.length;t++){var e=i[t];e.blur.blurY=8*(e.position-e.previousPosition),e.previousPosition=e.position;for(var n=0;n<e.symbols.length;n++){var a=e.symbols[n],c=a.y;a.y=(e.position+n)%e.symbols.length*r-r,a.y<0&&c>r&&(a.texture=o[Math.floor(Math.random()*o.length)],a.scale.x=a.scale.y=Math.min(r/a.texture.width,r/a.texture.height),a.x=Math.round((r-a.width)/2)),(0===t&&4===n||1===t&&9===n||2===t&&4===n||3===t&&9===n||4===t&&4===n)&&(a.texture=o[Math.floor(7)],a.scale.x=a.scale.y=Math.min(r/a.texture.width,r/a.texture.height),a.x=Math.round((r-a.width)/2))}}})),k=[],e.ticker.add((function(){for(var t=Date.now(),e=[],r=0;r<k.length;r++){var n=k[r],o=Math.min(1,(t-n.start)/n.time);n.object[n.property]=T(n.propertyBeginValue,n.target,n.easing(o)),n.change&&n.change(n),1===o&&(n.object[n.property]=n.target,n.complete&&n.complete(n),e.push(n))}for(var i=0;i<e.length;i++)k.splice(k.indexOf(e[i]),1)})),C={btn:document.querySelector(".btn_spin"),winner:document.querySelector(".winner"),winElements:document.querySelectorAll(".win"),modalOverlay:document.querySelector(".modal_overlay"),modalSignup:document.querySelector(".modal_signup"),sounds:{win:new Audio("https://n1md7.github.io/slot-game/sound/win.mp3"),spin:new Audio("https://n1md7.github.io/slot-game/sound/spin.mp3")}},N=function(t,e,r){t.forEach((function(t,n){setTimeout((function(){t.classList.add(e)}),n*r)}))},A=function(t,e,r){setTimeout((function(){t.classList.add("show"),e.classList.add("show")}),r)},G=function(){setTimeout((function(){C.sounds.win.play(),C.winner.classList.add("active"),N(C.winElements,"active",500)}),6800),A(C.modalOverlay,C.modalSignup,11e3)},C.btn.addEventListener("click",(function(){a(),C.sounds.spin.play(),O(),G(),C.btn.style.opacity=.5,C.btn.style.pointerEvents="none"}));case 27:case"end":return t.stop()}}),t)})),function(){var t=this,e=arguments;return new Promise((function(r,n){var o=E.apply(t,e);function i(t){x(o,r,n,i,a,"next",t)}function a(t){x(o,r,n,i,a,"throw",t)}i(void 0)}))})()}},o={};function i(t){var e=o[t];if(void 0!==e)return e.exports;var r=o[t]={exports:{}};return n[t](r,r.exports,i),r.exports}i.m=n,t=[],i.O=(e,r,n,o)=>{if(!r){var a=1/0;for(l=0;l<t.length;l++){for(var[r,n,o]=t[l],c=!0,s=0;s<r.length;s++)(!1&o||a>=o)&&Object.keys(i.O).every((t=>i.O[t](r[s])))?r.splice(s--,1):(c=!1,o<a&&(a=o));if(c){t.splice(l--,1);var u=n();void 0!==u&&(e=u)}}return e}o=o||0;for(var l=t.length;l>0&&t[l-1][2]>o;l--)t[l]=t[l-1];t[l]=[r,n,o]},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,r)=>(i.f[r](t,e),e)),[])),i.u=t=>t+"."+{151:"394ba8a9913e262bff18",162:"ded8b2bbae5ffaa13e35",228:"819bc536211ce27892f3",544:"a686756468cb62acdb91",751:"de407cad77af56f0bc13",852:"2c0f6d0f2b0cb6aa4b92"}[t]+".js",i.miniCssF=t=>{},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),e={},r="big-bass-bonanza-slots:",i.l=(t,n,o,a)=>{if(e[t])e[t].push(n);else{var c,s;if(void 0!==o)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var f=u[l];if(f.getAttribute("src")==t||f.getAttribute("data-webpack")==r+o){c=f;break}}c||(s=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.setAttribute("data-webpack",r+o),c.src=t),e[t]=[n];var h=(r,n)=>{c.onerror=c.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((t=>t(n))),r)return r(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=h.bind(null,c.onerror),c.onload=h.bind(null,c.onload),s&&document.head.appendChild(c)}},i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!t||!/^http(s?):/.test(t));)t=r[n--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t={792:0};i.f.j=(e,r)=>{var n=i.o(t,e)?t[e]:void 0;if(0!==n)if(n)r.push(n[2]);else{var o=new Promise(((r,o)=>n=t[e]=[r,o]));r.push(n[2]=o);var a=i.p+i.u(e),c=new Error;i.l(a,(r=>{if(i.o(t,e)&&(0!==(n=t[e])&&(t[e]=void 0),n)){var o=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;c.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",c.name="ChunkLoadError",c.type=o,c.request=a,n[1](c)}}),"chunk-"+e,e)}},i.O.j=e=>0===t[e];var e=(e,r)=>{var n,o,[a,c,s]=r,u=0;if(a.some((e=>0!==t[e]))){for(n in c)i.o(c,n)&&(i.m[n]=c[n]);if(s)var l=s(i)}for(e&&e(r);u<a.length;u++)o=a[u],i.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return i.O(l)},r=self.webpackChunkbig_bass_bonanza_slots=self.webpackChunkbig_bass_bonanza_slots||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))})();var a=i.O(void 0,[730],(()=>i(5422)));a=i.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,